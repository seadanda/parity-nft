// Lightweight p5.js shim for KodaDot validation
// Provides minimal p5 API to bootstrap sketch.js

(function() {
  'use strict';

  // Global p5 instance mode
  window.p5 = {};

  // Canvas management
  window.createCanvas = function(w, h) {
    return { parent: function() {} };
  };

  window.noCanvas = function() {
    // No canvas needed for Three.js
  };

  // Lifecycle hooks
  window.preload = function() {};
  window.setup = function() {};
  window.draw = function() {};

  // Loop control
  window.noLoop = function() {};
  window.loop = function() {};

  // Window resize
  window.windowResized = function() {};

  // Math utilities
  window.min = Math.min;
  window.max = Math.max;
  window.abs = Math.abs;
  window.floor = Math.floor;
  window.ceil = Math.ceil;
  window.round = Math.round;
  window.sqrt = Math.sqrt;
  window.pow = Math.pow;

  // Dimensions
  window.windowWidth = window.innerWidth;
  window.windowHeight = window.innerHeight;
  window.width = window.innerWidth;
  window.height = window.innerHeight;

  // Image loading
  window.loadImage = function(url, callback) {
    const img = new Image();
    if (callback) img.onload = () => callback(img);
    img.src = url;
    return img;
  };

  // Drawing (no-ops for Three.js)
  window.background = function() {};
  window.fill = function() {};
  window.stroke = function() {};
  window.text = function() {};
  window.image = function() {};
  window.textAlign = function() {};

  // Initialize p5 after DOM loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initP5);
  } else {
    initP5();
  }

  function initP5() {
    // Call user's preload if defined
    if (typeof window.preload === 'function' && window.preload.toString().indexOf('[native code]') === -1) {
      window.preload();
    }

    // Call user's setup if defined
    if (typeof window.setup === 'function' && window.setup.toString().indexOf('[native code]') === -1) {
      window.setup();
    }
  }

  // Update dimensions on resize
  window.addEventListener('resize', function() {
    window.windowWidth = window.innerWidth;
    window.windowHeight = window.innerHeight;
    window.width = window.innerWidth;
    window.height = window.innerHeight;
    if (typeof window.windowResized === 'function' && window.windowResized.toString().indexOf('[native code]') === -1) {
      window.windowResized();
    }
  });
})();
